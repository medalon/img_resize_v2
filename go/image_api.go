/*
 * Image Resize
 *
 * This is a Image Resize server.
 *
 * API version: 1.0.0
 * Contact: fedorenko.tolik@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"image"
	"image/gif"
	"image/jpeg"
	"image/png"
	"net/http"
	"os"
	"strconv"

	"github.com/gorilla/mux"
	"github.com/pkg/errors"
	"github.com/unrolled/render"
	"golang.org/x/image/draw"
)

var rend = render.New()
var workingDirectory = "imgs/"

// ImageFormShow to show upload form html from template
func ImageFormShow(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/html; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	rend.HTML(w, http.StatusOK, "index", "")
}

// ImageShow to show resized image
func ImageShow(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	var buff bytes.Buffer
	size := vars["size"]
	imageID := vars["imageId"]

	src, imgFormat, err := openImage(workingDirectory + imageID)
	if err != nil {
		fmt.Println(errors.Wrap(err, "cannot find the image file"))
	}
	imgWidth, imgHeight := src.Bounds().Max.X, src.Bounds().Max.Y
	newWidth, err := strconv.Atoi(size)
	newHeight := newWidth
	// new size of image
	if imgWidth > imgHeight {
		newHeight = int(float32(newHeight) * float32(imgHeight) / float32(imgWidth))
	} else {
		newWidth = int(float32(newWidth) * float32(imgWidth) / float32(imgHeight))
	}
	dst := image.NewRGBA(image.Rect(0, 0, newWidth, newHeight))
	// resize using given scaler
	draw.BiLinear.Scale(dst, dst.Bounds(), src, src.Bounds(), draw.Over, nil)
	switch imgFormat {
	case "jpeg":
		jpeg.Encode(&buff, dst, nil)
	case "png":
		png.Encode(&buff, dst)
	case "gif":
		gif.Encode(&buff, dst, nil)
	}
	// Encode the bytes in the buffer to a base64 string
	encodedString := base64.StdEncoding.EncodeToString(buff.Bytes())

	// You can embed it in an html doc with this string
	rend.HTML(w, http.StatusOK, "show", encodedString)
}

func openImage(imgFile string) (image.Image, string, error) {
	fl, err := os.Open(imgFile)
	if err != nil {
		return nil, "", errors.Wrap(err, "cannot open file")
	}
	defer fl.Close()
	img, imgType, err := image.Decode(fl)
	if err != nil {
		return nil, "", errors.Wrap(err, "cannot decode image file")
	}

	return img, imgType, nil
}
